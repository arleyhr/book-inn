name: CI/CD

trigger:
  - main
pr:
  - main

variables:
  CI: 'true'
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)
  # Azure deployment variables
  API_APP_NAME: 'book-inn-api'
  WEB_APP_NAME: 'book-inn-web'
  RESOURCE_GROUP: 'book-inn-rg'
  LOCATION: 'eastus'
  NODE_VERSION: '20.x'

stages:
  - stage: Build
    jobs:
      - job: BuildAndTest
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 0
          - task: NodeTool@0
            inputs:
              versionSpec: '$(NODE_VERSION)'
          - script: npm ci --legacy-peer-deps
            displayName: 'Install dependencies'
          - script: npx nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) lint test build
            displayName: 'Build and test affected apps'

  - stage: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: DeployAPI
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create resource group if it doesn't exist
                az group create --name $(RESOURCE_GROUP) --location $(LOCATION)

                # Create API App Service Plan
                az appservice plan create \
                  --name "$(API_APP_NAME)-plan" \
                  --resource-group $(RESOURCE_GROUP) \
                  --sku B1 \
                  --is-linux

                # Create API App Service
                az webapp create \
                  --name $(API_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --plan "$(API_APP_NAME)-plan" \
                  --runtime "NODE|$(NODE_VERSION)"

                # Configure API App Settings
                az webapp config appsettings set \
                  --name $(API_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --settings \
                    PORT=8080 \
                    DATABASE_HOST="$(DATABASE_HOST)" \
                    DATABASE_PORT="$(DATABASE_PORT)" \
                    DATABASE_USERNAME="$(DATABASE_USERNAME)" \
                    DATABASE_PASSWORD="$(DATABASE_PASSWORD)" \
                    DATABASE_NAME="$(DATABASE_NAME)" \
                    JWT_SECRET="$(JWT_SECRET)"
            displayName: 'Create API Infrastructure'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'dist/apps/api'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/api.zip'
              replaceExistingArchive: true

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription'
              appName: '$(API_APP_NAME)'
              package: '$(Build.ArtifactStagingDirectory)/api.zip'
              deploymentMethod: 'auto'

      - job: DeployWeb
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create Web App Service Plan
                az appservice plan create \
                  --name "$(WEB_APP_NAME)-plan" \
                  --resource-group $(RESOURCE_GROUP) \
                  --sku B1 \
                  --is-linux

                # Create Web App Service
                az webapp create \
                  --name $(WEB_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --plan "$(WEB_APP_NAME)-plan" \
                  --runtime "NODE|$(NODE_VERSION)"

                # Configure Web App Settings
                az webapp config appsettings set \
                  --name $(WEB_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --settings \
                    NEXT_PUBLIC_API_URL="https://$(API_APP_NAME).azurewebsites.net"
            displayName: 'Create Web Infrastructure'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'dist/apps/web-react'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/web.zip'
              replaceExistingArchive: true

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription'
              appName: '$(WEB_APP_NAME)'
              package: '$(Build.ArtifactStagingDirectory)/web.zip'
              deploymentMethod: 'auto'
