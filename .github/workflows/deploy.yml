name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  PROJECT_NAME: 'bookinn'
  ENVIRONMENT: 'production'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npx nx run-many --target=build --all --prod

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Primer despliegue para crear el storage account
    - name: Initial Terraform Setup
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        # Crear archivo tfvars temporal para el storage
        cat > initial.tfvars <<EOF
        project_name = "${{ env.PROJECT_NAME }}"
        environment = "${{ env.ENVIRONMENT }}"
        location = "eastus"
        db_admin_username = "${{ secrets.DB_ADMIN_USERNAME }}"
        db_admin_password = "${{ secrets.DB_ADMIN_PASSWORD }}"
        EOF

        terraform init -backend=false
        terraform apply -auto-approve -target=azurerm_storage_account.tfstate -var-file=initial.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Configurar el backend
    - name: Configure Terraform Backend
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)
        cp backend.tf.example backend.tf
        sed -i "s/<STORAGE_ACCOUNT_SUFFIX>/$STORAGE_ACCOUNT_NAME/" backend.tf

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_db_admin_username: ${{ secrets.DB_ADMIN_USERNAME }}
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_jwt_refresh_token_secret: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
        TF_VAR_google_places_api_key: ${{ secrets.GOOGLE_PLACES_API_KEY }}
        TF_VAR_google_maps_id: ${{ secrets.GOOGLE_MAPS_ID }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Deploy API
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-api
        package: dist/apps/api

    - name: Deploy Web
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-web
        package: dist/apps/web-react
